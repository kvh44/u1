<?php

/**
 * BaseUtoconsultPhoto
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $user_id
 * @property integer $category_id
 * @property string $title
 * @property string $content
 * @property string $photoicon
 * @property string $photosmall
 * @property string $photo
 * @property string $link
 * @property integer $visitnumber
 * @property boolean $isdeleted
 * @property boolean $isvalid
 * @property UtoconsultPhotoCategory $UtoconsultPhotoCategory
 * @property UtoconsultUser $UtoconsultUser
 * 
 * @method integer                 getUserId()                  Returns the current record's "user_id" value
 * @method integer                 getCategoryId()              Returns the current record's "category_id" value
 * @method string                  getTitle()                   Returns the current record's "title" value
 * @method string                  getContent()                 Returns the current record's "content" value
 * @method string                  getPhotoicon()               Returns the current record's "photoicon" value
 * @method string                  getPhotosmall()              Returns the current record's "photosmall" value
 * @method string                  getPhoto()                   Returns the current record's "photo" value
 * @method string                  getLink()                    Returns the current record's "link" value
 * @method integer                 getVisitnumber()             Returns the current record's "visitnumber" value
 * @method boolean                 getIsdeleted()               Returns the current record's "isdeleted" value
 * @method boolean                 getIsvalid()                 Returns the current record's "isvalid" value
 * @method UtoconsultPhotoCategory getUtoconsultPhotoCategory() Returns the current record's "UtoconsultPhotoCategory" value
 * @method UtoconsultUser          getUtoconsultUser()          Returns the current record's "UtoconsultUser" value
 * @method UtoconsultPhoto         setUserId()                  Sets the current record's "user_id" value
 * @method UtoconsultPhoto         setCategoryId()              Sets the current record's "category_id" value
 * @method UtoconsultPhoto         setTitle()                   Sets the current record's "title" value
 * @method UtoconsultPhoto         setContent()                 Sets the current record's "content" value
 * @method UtoconsultPhoto         setPhotoicon()               Sets the current record's "photoicon" value
 * @method UtoconsultPhoto         setPhotosmall()              Sets the current record's "photosmall" value
 * @method UtoconsultPhoto         setPhoto()                   Sets the current record's "photo" value
 * @method UtoconsultPhoto         setLink()                    Sets the current record's "link" value
 * @method UtoconsultPhoto         setVisitnumber()             Sets the current record's "visitnumber" value
 * @method UtoconsultPhoto         setIsdeleted()               Sets the current record's "isdeleted" value
 * @method UtoconsultPhoto         setIsvalid()                 Sets the current record's "isvalid" value
 * @method UtoconsultPhoto         setUtoconsultPhotoCategory() Sets the current record's "UtoconsultPhotoCategory" value
 * @method UtoconsultPhoto         setUtoconsultUser()          Sets the current record's "UtoconsultUser" value
 * 
 * @package    uto
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUtoconsultPhoto extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('utoconsult_photo');
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('category_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('content', 'string', 4000, array(
             'type' => 'string',
             'length' => 4000,
             ));
        $this->hasColumn('photoicon', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 100,
             ));
        $this->hasColumn('photosmall', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 100,
             ));
        $this->hasColumn('photo', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 100,
             ));
        $this->hasColumn('link', 'string', 500, array(
             'type' => 'string',
             'length' => 500,
             ));
        $this->hasColumn('visitnumber', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('isdeleted', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));
        $this->hasColumn('isvalid', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('UtoconsultPhotoCategory', array(
             'local' => 'category_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('UtoconsultUser', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'fields' => 
             array(
              0 => 'created_at',
              1 => 'user_id',
             ),
             ));
        $this->actAs($timestampable0);
        $this->actAs($sluggable0);
    }
}